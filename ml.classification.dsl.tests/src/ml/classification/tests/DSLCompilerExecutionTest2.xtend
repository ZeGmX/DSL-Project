/*
 * generated by Xtext 2.19.0
 */
package ml.classification.tests

import com.google.inject.Inject

import ml.classification.dSL.ML
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import java.nio.file.Files
import java.nio.file.Paths
import ml.classification.generator.Compiler2R
import ml.classification.generator.Compiler2Python
import java.io.BufferedReader
import java.io.InputStream
import java.io.InputStreamReader
import java.io.IOException
import java.io.RandomAccessFile
import ml.classification.generator.PrettyPrinter
import ml.classification.generator.Interpreter

@ExtendWith(InjectionExtension)
@InjectWith(DSLInjectorProvider)
class DSLCompilerExecutionTest2 {
	
	@Inject
	ParseHelper<ML> parseHelper
	
	@Test
	def main () throws Exception  {
		System.out.println("test");
		var args ="../../DSL-Project/ml.classification.dsl.tests/TestFiles/test.mldsl"
		if (args.length >= 1) {
			var path = args //args.get(0);

			var content = Files.readString(Paths.get(path));
			System.out.println(content);
			var input = parseHelper.parse(content);
			Assertions.assertNotNull(input);

			var pp = new PrettyPrinter();
			System.out.println("****************");
			System.out.println("* Pretty print *");
			System.out.println("****************");
			System.out.println(pp.prettyprint(input));
			System.out.println("\n\n\n\n\n");

			var interpreter = new Interpreter();
			System.out.println("***************");
			System.out.println("* Interpreter *");
			System.out.println("***************");
			interpreter.interpret(input);

			var compPy = new Compiler2Python();
			System.out.println("***********************");
			System.out.println("* Generating .py file *");
			System.out.println("***********************");
			var py = compPy.compile(input);
			var fileNamePy = path.replaceAll(".mldsl", ".py");
			var writer = new RandomAccessFile(fileNamePy, "rw");
			writer.writeChars(py);
			writer.close();

			var compR = new Compiler2R();
			System.out.println("**********************");
			System.out.println("* Generating .r file *");
			System.out.println("**********************");
			var r = compR.compile(input);
			var fileNameR = path.replaceAll(".mldsl", ".r");
			var writer2 = new RandomAccessFile(fileNameR, "rw");
			writer2.writeChars(r);
			writer2.close();
		}
	}
}




