/*
 * generated by Xtext 2.19.0
 */
package ml.classification.tests

import com.google.inject.Inject

import ml.classification.dSL.ML
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import java.nio.file.Files
import java.nio.file.Paths
import ml.classification.generator.Compiler2R
import ml.classification.generator.Compiler2Python
import java.io.BufferedReader
import java.io.InputStream
import java.io.InputStreamReader
import java.io.IOException

class AfficheurFlux implements Runnable{
	
	InputStream m_inputStream
	public String m_trace
	
	new(InputStream inputStream) {
        m_inputStream = inputStream;
    }
	
	def BufferedReader getBufferedReader(InputStream is) {
        return new BufferedReader(new InputStreamReader(is));
    }
	
	override run() {
		var br = getBufferedReader(m_inputStream);
        var ligne = "";
        try {
            while ((ligne = br.readLine()) !== null) {
            	m_trace+=ligne
                System.out.println(ligne);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
}

@ExtendWith(InjectionExtension)
@InjectWith(DSLInjectorProvider)
class DSLCompilerExecutionTest {
	
	@Inject
	ParseHelper<ML> parseHelper
	
	def boolean equals(CharSequence a, CharSequence b){
		/* 
		if (a.length!=b.length){
			return false
		}
		* */
		for ( var i = 0; i < a.length ; i++){
			if (!(a.charAt(i).equals(b.charAt(i)))) {
				print("\""+a.charAt(i)+"\""+"!="+"\""+b.charAt(i)+"\""+"\n")
				print(a.subSequence(0,i)+" vs "+ b.subSequence(0,i))
				return false
			}
		}
		return true
	}
	
	
	@Test
	def void testCompilersExecutionOutput1() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/1.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/1.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput2() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/2.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/2.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNotNull(fluxErreurPy.m_trace)
            Assertions.assertNotEquals(fluxErreurR.m_trace,r_error)
            

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput3() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/3.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/3.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNotNull(fluxErreurPy.m_trace)
            Assertions.assertNotEquals(fluxErreurR.m_trace,r_error)
            Assertions.assertTrue(fluxErreurR.m_trace.contains("algo must be either \"svm\" or \"tree\"")&&fluxErreurPy.m_trace.contains("algo must be either \"svm\" or \"tree\""))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput4() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/4.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/4.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput5() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/5.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/5.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput6() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/6.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/6.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput7() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/7.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/7.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput8() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/8.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/8.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput9() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/9.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/9.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput10() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/10.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/10.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
	
	@Test
	def void testCompilersExecutionOutput11() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python

		System.out.println("Test d'exécution des fichiers générés");
        try {
            var process_py = Runtime.getRuntime().exec("C:/Users/Utilisateur/AppData/Local/Programs/Python/Python38/python.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/11.py")
            var process_r = Runtime.getRuntime().exec("C:/ProgramData/R-4.0.3/bin/Rscript.exe C:/Users/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/11.r")
            
            var fluxSortiePy = new AfficheurFlux(process_py.getInputStream());
            var fluxErreurPy = new AfficheurFlux(process_py.getErrorStream());
            
            new Thread(fluxSortiePy).start();
            new Thread(fluxErreurPy).start();
            
            var fluxSortieR = new AfficheurFlux(process_r.getInputStream());
            var fluxErreurR = new AfficheurFlux(process_r.getErrorStream());
			
            new Thread(fluxSortieR).start();
            new Thread(fluxErreurR).start();
            
            process_py.waitFor();
            process_r.waitFor();
            
            var r_error = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/runPyR/error_r.txt"))
		
            Assertions.assertNull(fluxErreurPy.m_trace)
            Assertions.assertEquals(fluxErreurR.m_trace,r_error)
            
            val outputR = fluxSortieR.m_trace.split("of ",2)
            val outputPy = fluxSortiePy.m_trace.split("of ",2)
            
            Assertions.assertEquals(outputR.get(0),outputPy.get(0))

            
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        System.out.println("Fin du test");
	}
}




