/*
 * generated by Xtext 2.19.0
 */
package ml.classification.tests

import com.google.inject.Inject

import ml.classification.dSL.ML
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import java.nio.file.Files
import java.nio.file.Paths
import ml.classification.generator.Compiler2R
import ml.classification.generator.Compiler2Python

@ExtendWith(InjectionExtension)
@InjectWith(DSLInjectorProvider)
class DSLCompilerTest {
	@Inject
	ParseHelper<ML> parseHelper
	
	def boolean equals(CharSequence a, CharSequence b){
		/* 
		if (a.length!=b.length){
			return false
		}
		* */
		for ( var i = 0; i < a.length ; i++){
			if (!(a.charAt(i).equals(b.charAt(i)))) {
				print("\""+a.charAt(i)+"\""+"!="+"\""+b.charAt(i)+"\""+"\n")
				print(a.subSequence(0,i)+" vs "+ b.subSequence(0,i))
				return false
			}
		}
		return true
	}
	
	
	@Test
	def void testCompilersOutput1() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/1.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/1.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/1.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of variable references
	@Test
	def void testCompilersOutput2() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/2.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/2.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/2.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of the "print" keyword
	@Test
	def void testCompilersOutput3() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/3.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/3.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/3.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of the column keywords
	@Test
	def void testCompilersOutput4() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/4.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/4.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/4.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of the "use_strategy" keyword
	@Test
	def void testCompilersOutput5() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/5.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/5.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/5.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of the "use_metric" keyword
	@Test
	def void testCompilersOutput6() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/6.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/6.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/6.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of the "use_algorithm" keyword
	@Test
	def void testCompilersOutput7() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/7.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/7.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/7.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of the "read" keyword
	@Test
	def void testCompilersOutput8() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/8.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/8.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/8.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of a bigger programm
	@Test
	def void testCompilersOutput9() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/9.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/9.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/9.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of a bigger programm
	@Test
	def void testCompilersOutput10() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/10.mldsl")))
		Assertions.assertNotNull(input)
		
		var py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/10.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/10.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of a bigger programm
	@Test
	def void testCompilersOutput11() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/11.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/11.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/11.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of a bigger programm
	@Test
	def void testCompilersOutput12() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/12.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/12.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/12.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//test of a bigger programm
	@Test
	def void testCompilersOutput13() {
		val Rcompiler = new Compiler2R
		val Pcompiler = new Compiler2Python
		
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/13.mldsl")))
		Assertions.assertNotNull(input)
		
		val py_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/13.py"))
		Assertions.assertNotNull(py_expected_output)
		
		var r_expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/13.r"))
		Assertions.assertNotNull(r_expected_output)
		r_expected_output = r_expected_output.replaceAll("\r", "")
		// For compatibility issues between Windows and Debian
		
		var r_output = Rcompiler.compile(input)
		Assertions.assertNotNull(r_output)
		r_output = r_output.replaceAll('\r', '')
		// For compatibility issues between Windows and Debian

		Assertions.assertEquals(r_expected_output,r_output)
		Assertions.assertTrue(equals(r_output,r_expected_output))
		
		val py_output = Pcompiler.compile(input)
		Assertions.assertNotNull(py_output)
		
		Assertions.assertEquals(py_expected_output,py_output)
		Assertions.assertTrue(equals(py_output,py_expected_output))
	}
	
	//@Test
	def void testRCompilerSpeed() {
		val nbTests = 1000
		var startTime = System.nanoTime
		var Rcompiler = new Compiler2R
		
		val input1 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s1.mldsl")))
		val input2 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s2.mldsl")))
		val input3 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s3.mldsl")))
		val input4 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s4.mldsl")))
		val input5 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s5.mldsl")))
		val input6 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s6.mldsl")))
		val input7 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s7.mldsl")))
		val input8 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s8.mldsl")))
		val input9 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s9.mldsl")))
		
		Assertions.assertNotNull(input1)
		Assertions.assertNotNull(input2)
		Assertions.assertNotNull(input3)
		Assertions.assertNotNull(input4)
		Assertions.assertNotNull(input5)
		Assertions.assertNotNull(input6)
		Assertions.assertNotNull(input7)
		Assertions.assertNotNull(input8)
		Assertions.assertNotNull(input9)
		/*
		val expected_output_1 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s1.r"))
		val expected_output_2 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s2.r"))
		val expected_output_3 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s3.r"))
		val expected_output_4 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s4.r"))
		val expected_output_5 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s5.r"))
		val expected_output_6 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s6.r"))
		val expected_output_7 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s7.r"))
		val expected_output_8 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s8.r"))
		val expected_output_9 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s9.r"))
		
		Assertions.assertNotNull(expected_output_1)
		Assertions.assertNotNull(expected_output_2)
		Assertions.assertNotNull(expected_output_3)
		Assertions.assertNotNull(expected_output_4)
		Assertions.assertNotNull(expected_output_5)
		Assertions.assertNotNull(expected_output_6)
		Assertions.assertNotNull(expected_output_7)
		Assertions.assertNotNull(expected_output_8)
		Assertions.assertNotNull(expected_output_9)
		*/
		System.out.println("Speed test - R compiler : input 1")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input1)
		}
		val meanTimeInput1 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 2")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input2)
		}
		val meanTimeInput2 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 3")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input3)
		}
		val meanTimeInput3 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 4")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input4)
		}
		val meanTimeInput4 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 5")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input5)
		}
		val meanTimeInput5 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 6")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input6)
		}
		val meanTimeInput6 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 7")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input7)
		}
		val meanTimeInput7 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 8")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input8)
		}
		val meanTimeInput8 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - R compiler : input 9")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			Rcompiler = new Compiler2R
			Rcompiler.compile(input9)
		}
		val meanTimeInput9 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		val output_1 = Rcompiler.compile(input1)
		val output_2 = Rcompiler.compile(input2)
		val output_3 = Rcompiler.compile(input3)
		val output_4 = Rcompiler.compile(input4)
		val output_5 = Rcompiler.compile(input5)
		val output_6 = Rcompiler.compile(input6)
		val output_7 = Rcompiler.compile(input7)
		val output_8 = Rcompiler.compile(input8)
		val output_9 = Rcompiler.compile(input9)
		
		Assertions.assertNotNull(output_1)
		Assertions.assertNotNull(output_2)
		Assertions.assertNotNull(output_3)
		Assertions.assertNotNull(output_4)
		Assertions.assertNotNull(output_5)
		Assertions.assertNotNull(output_6)
		Assertions.assertNotNull(output_7)
		Assertions.assertNotNull(output_8)
		Assertions.assertNotNull(output_9)
		/*
		Assertions.assertEquals(expected_output_1,output_1)
		Assertions.assertEquals(expected_output_2,output_2)
		Assertions.assertEquals(expected_output_3,output_3)
		Assertions.assertEquals(expected_output_4,output_4)
		Assertions.assertEquals(expected_output_5,output_5)
		Assertions.assertEquals(expected_output_6,output_6)
		Assertions.assertEquals(expected_output_7,output_7)
		Assertions.assertEquals(expected_output_8,output_8)
		Assertions.assertEquals(expected_output_9,output_9)
		*/
		System.out.println("***")
		System.out.println("R compiler  ")
		System.out.println("Mean time to compile ")
		System.out.println("For 10 lines : " + meanTimeInput1 + "ms")
		System.out.println("For 20 lines : " + meanTimeInput2 + "ms")
		System.out.println("For 40 lines : " + meanTimeInput3 + "ms")
		System.out.println("For 80 lines : " + meanTimeInput4 + "ms")
		System.out.println("For 160 lines : " + meanTimeInput5 + "ms")
		System.out.println("For 320 lines : " + meanTimeInput6 + "ms")
		System.out.println("For 640 lines : " + meanTimeInput7 + "ms")
		System.out.println("For 1280 lines : " + meanTimeInput8 + "ms")
		System.out.println("For 2560 lines : " + meanTimeInput9 + "ms")
		System.out.println("***")
	}
	
	//@Test
	def void testPyCompilerSpeed() {
		val nbTests = 1000
		var startTime = System.nanoTime
		var PyCompiler = new Compiler2Python
		
		val input1 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s1.mldsl")))
		val input2 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s2.mldsl")))
		val input3 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s3.mldsl")))
		val input4 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s4.mldsl")))
		val input5 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s5.mldsl")))
		val input6 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s6.mldsl")))
		val input7 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s7.mldsl")))
		val input8 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s8.mldsl")))
		val input9 = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/input/s9.mldsl")))
		
		Assertions.assertNotNull(input1)
		Assertions.assertNotNull(input2)
		Assertions.assertNotNull(input3)
		Assertions.assertNotNull(input4)
		Assertions.assertNotNull(input5)
		Assertions.assertNotNull(input6)
		Assertions.assertNotNull(input7)
		Assertions.assertNotNull(input8)
		Assertions.assertNotNull(input9)
		/*
		val expected_output_1 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s1.r"))
		val expected_output_2 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s2.r"))
		val expected_output_3 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s3.r"))
		val expected_output_4 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s4.r"))
		val expected_output_5 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s5.r"))
		val expected_output_6 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s6.r"))
		val expected_output_7 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s7.r"))
		val expected_output_8 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s8.r"))
		val expected_output_9 = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/compiler/expected/s9.r"))
		
		Assertions.assertNotNull(expected_output_1)
		Assertions.assertNotNull(expected_output_2)
		Assertions.assertNotNull(expected_output_3)
		Assertions.assertNotNull(expected_output_4)
		Assertions.assertNotNull(expected_output_5)
		Assertions.assertNotNull(expected_output_6)
		Assertions.assertNotNull(expected_output_7)
		Assertions.assertNotNull(expected_output_8)
		Assertions.assertNotNull(expected_output_9)
		*/
		
		System.out.println("Speed test - Python compiler : input 1")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input1)
		}
		val meanTimeInput1 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 2")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input2)
		}
		val meanTimeInput2 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 3")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input3)
		}
		val meanTimeInput3 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 4")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input4)
		}
		val meanTimeInput4 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 5")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input5)
		}
		val meanTimeInput5 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 6")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input6)
		}
		val meanTimeInput6 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 7")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input7)
		}
		val meanTimeInput7 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 8")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input8)
		}
		val meanTimeInput8 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		System.out.println("Speed test - Python compiler : input 9")
		startTime = System.nanoTime
		for (i: 0..< nbTests) {
			PyCompiler = new Compiler2Python
			PyCompiler.compile(input9)
		}
		val meanTimeInput9 = (System.nanoTime - startTime) / (nbTests * 1000)
		
		val output_1 = PyCompiler.compile(input1)
		val output_2 = PyCompiler.compile(input2)
		val output_3 = PyCompiler.compile(input3)
		val output_4 = PyCompiler.compile(input4)
		val output_5 = PyCompiler.compile(input5)
		val output_6 = PyCompiler.compile(input6)
		val output_7 = PyCompiler.compile(input7)
		val output_8 = PyCompiler.compile(input8)
		val output_9 = PyCompiler.compile(input9)
		
		Assertions.assertNotNull(output_1)
		Assertions.assertNotNull(output_2)
		Assertions.assertNotNull(output_3)
		Assertions.assertNotNull(output_4)
		Assertions.assertNotNull(output_5)
		Assertions.assertNotNull(output_6)
		Assertions.assertNotNull(output_7)
		Assertions.assertNotNull(output_8)
		Assertions.assertNotNull(output_9)
		/*
		Assertions.assertEquals(expected_output_1,output_1)
		Assertions.assertEquals(expected_output_2,output_2)
		Assertions.assertEquals(expected_output_3,output_3)
		Assertions.assertEquals(expected_output_4,output_4)
		Assertions.assertEquals(expected_output_5,output_5)
		Assertions.assertEquals(expected_output_6,output_6)
		Assertions.assertEquals(expected_output_7,output_7)
		Assertions.assertEquals(expected_output_8,output_8)
		Assertions.assertEquals(expected_output_9,output_9)
		*/
		System.out.println("***")
		System.out.println("Python compiler  ")
		System.out.println("Mean time to compile ")
		System.out.println("For 10 lines : " + meanTimeInput1 + "ms")
		System.out.println("For 20 lines : " + meanTimeInput2 + "ms")
		System.out.println("For 40 lines : " + meanTimeInput3 + "ms")
		System.out.println("For 80 lines : " + meanTimeInput4 + "ms")
		System.out.println("For 160 lines : " + meanTimeInput5 + "ms")
		System.out.println("For 320 lines : " + meanTimeInput6 + "ms")
		System.out.println("For 640 lines : " + meanTimeInput7 + "ms")
		System.out.println("For 1280 lines : " + meanTimeInput8 + "ms")
		System.out.println("For 2560 lines : " + meanTimeInput9 + "ms")
		System.out.println("***")
	}
}


