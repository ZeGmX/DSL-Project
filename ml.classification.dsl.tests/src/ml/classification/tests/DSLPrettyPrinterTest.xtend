/*
 * generated by Xtext 2.19.0
 */
package ml.classification.tests

import com.google.inject.Inject

import ml.classification.dSL.ML
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import java.nio.file.Files
import java.nio.file.Paths
import ml.classification.generator.PrettyPrinter

@ExtendWith(InjectionExtension)
@InjectWith(DSLInjectorProvider)
class DSLPrettyPrinterTest {
	@Inject
	ParseHelper<ML> parseHelper
	//"C:/Utilisateurs/Utilisateur/Documents/ESIR/ESIR3-SIF/DSL/ProjetGit/Tests/prettyprinter/input/1.mldsl"
	
	def boolean equals(CharSequence a, CharSequence b){
		if (a.length!=b.length){
			return false
		}
		for ( var i = 0; i < a.length ; i++){
			if (a.charAt(i)!=b.charAt(i)) {
				return false
			}
		}
		return true
	}
	
	@Test
	def void testPrettyPrinterOutput1() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/1.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/1.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput2() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/2.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/2.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput3() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/3.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/3.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput4() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/4.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/4.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput5() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/5.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/5.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput6() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/6.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/6.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput7() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/7.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/7.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput8() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/8.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/8.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput9() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/9.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/9.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput10() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/10.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/10.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput11() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/11.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/11.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput12() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/12.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/12.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
	@Test
	def void testPrettyPrinterOutput13() {
		val prettyPrinter = new PrettyPrinter
		val input = parseHelper.parse(Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/input/13.mldsl")))
		Assertions.assertNotNull(input)
		val output = prettyPrinter.prettyprint(input)
		Assertions.assertNotNull(output)
		print("***Output:\n" + output)
		val expected_output = Files.readString(Paths.get("../../DSL-Project/ml.classification.dsl.tests/TestFiles/prettyprinter/expected/13.mldsl"))
		print("\n***expected:\n" + expected_output + "\n\n\n")
		Assertions.assertTrue(equals(output,expected_output))
	}
	
}
