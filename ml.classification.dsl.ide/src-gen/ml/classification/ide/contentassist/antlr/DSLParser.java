/*
 * generated by Xtext 2.23.0
 */
package ml.classification.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import ml.classification.ide.contentassist.antlr.internal.InternalDSLParser;
import ml.classification.services.DSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getColumnAccess().getAlternatives(), "rule__Column__Alternatives");
			builder.put(grammarAccess.getStrategy_chooseAccess().getAlternatives(), "rule__Strategy_choose__Alternatives");
			builder.put(grammarAccess.getMLAccess().getGroup(), "rule__ML__Group__0");
			builder.put(grammarAccess.getAssignAccess().getGroup(), "rule__Assign__Group__0");
			builder.put(grammarAccess.getUse_MetricAccess().getGroup(), "rule__Use_Metric__Group__0");
			builder.put(grammarAccess.getColumnAccess().getGroup_0(), "rule__Column__Group_0__0");
			builder.put(grammarAccess.getColumnAccess().getGroup_1(), "rule__Column__Group_1__0");
			builder.put(grammarAccess.getColumnAccess().getGroup_2(), "rule__Column__Group_2__0");
			builder.put(grammarAccess.getStrategy_chooseAccess().getGroup_0(), "rule__Strategy_choose__Group_0__0");
			builder.put(grammarAccess.getStrategy_chooseAccess().getGroup_1(), "rule__Strategy_choose__Group_1__0");
			builder.put(grammarAccess.getReadAccess().getGroup(), "rule__Read__Group__0");
			builder.put(grammarAccess.getAlgo_chooseAccess().getGroup(), "rule__Algo_choose__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getMLAccess().getStatementsAssignment_0(), "rule__ML__StatementsAssignment_0");
			builder.put(grammarAccess.getMLAccess().getStatementsAssignment_1(), "rule__ML__StatementsAssignment_1");
			builder.put(grammarAccess.getStatementAccess().getAssignAssignment_0(), "rule__Statement__AssignAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getPrimitiveAssignment_1(), "rule__Statement__PrimitiveAssignment_1");
			builder.put(grammarAccess.getAssignAccess().getVarnameAssignment_0(), "rule__Assign__VarnameAssignment_0");
			builder.put(grammarAccess.getAssignAccess().getAssign_valueAssignment_2(), "rule__Assign__Assign_valueAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getExpr_primAssignment_0(), "rule__Expression__Expr_primAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getExpr_constAssignment_1(), "rule__Expression__Expr_constAssignment_1");
			builder.put(grammarAccess.getPrimitiveAccess().getPrintAssignment_0(), "rule__Primitive__PrintAssignment_0");
			builder.put(grammarAccess.getPrimitiveAccess().getAlgo_chooseAssignment_1(), "rule__Primitive__Algo_chooseAssignment_1");
			builder.put(grammarAccess.getPrimitiveAccess().getReadAssignment_2(), "rule__Primitive__ReadAssignment_2");
			builder.put(grammarAccess.getPrimitiveAccess().getStrategy_chooseAssignment_3(), "rule__Primitive__Strategy_chooseAssignment_3");
			builder.put(grammarAccess.getPrimitiveAccess().getColumnAssignment_4(), "rule__Primitive__ColumnAssignment_4");
			builder.put(grammarAccess.getPrimitiveAccess().getUse_metricAssignment_5(), "rule__Primitive__Use_metricAssignment_5");
			builder.put(grammarAccess.getUse_MetricAccess().getMetricAssignment_1(), "rule__Use_Metric__MetricAssignment_1");
			builder.put(grammarAccess.getColumnAccess().getUseAssignment_0_1(), "rule__Column__UseAssignment_0_1");
			builder.put(grammarAccess.getColumnAccess().getUnuseAssignment_1_1(), "rule__Column__UnuseAssignment_1_1");
			builder.put(grammarAccess.getColumnAccess().getPredictAssignment_2_1(), "rule__Column__PredictAssignment_2_1");
			builder.put(grammarAccess.getStrategy_chooseAccess().getStrategyAssignment_0_1(), "rule__Strategy_choose__StrategyAssignment_0_1");
			builder.put(grammarAccess.getStrategy_chooseAccess().getRatioAssignment_0_2(), "rule__Strategy_choose__RatioAssignment_0_2");
			builder.put(grammarAccess.getStrategy_chooseAccess().getStrategyAssignment_1_1(), "rule__Strategy_choose__StrategyAssignment_1_1");
			builder.put(grammarAccess.getStrategy_chooseAccess().getNbAssignment_1_2(), "rule__Strategy_choose__NbAssignment_1_2");
			builder.put(grammarAccess.getReadAccess().getPathAssignment_1(), "rule__Read__PathAssignment_1");
			builder.put(grammarAccess.getReadAccess().getSeparatorAssignment_2(), "rule__Read__SeparatorAssignment_2");
			builder.put(grammarAccess.getAlgo_chooseAccess().getAlgorithmAssignment_1(), "rule__Algo_choose__AlgorithmAssignment_1");
			builder.put(grammarAccess.getPrintAccess().getPrintAssignment_1(), "rule__Print__PrintAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLGrammarAccess grammarAccess;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
