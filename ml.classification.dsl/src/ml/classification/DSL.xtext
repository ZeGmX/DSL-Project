grammar ml.classification.DSL with org.eclipse.xtext.common.Terminals

generate dSL "http://www.classification.ml/DSL"

// concrete and abstract syntax
ML:
	(statements+=Statement)* statements+=Statement;
		
Statement :
	assign=Assign | 
	primitive=Primitive;

Assign:
	varname=ID "=" assign_value=Expression;
	
Expression:
	expr_prim=Primitive | expr_const=Constant;

Primitive:
	print=Print | 
	algo_choose=Algo_choose | 
	read=Read | 
	strategy_choose=Strategy_choose | 
	column=Column | 
	use_metric=Use_Metric|
	predict=PREDICT;

Constant:
	constantInt=MLINT | 
	constantDouble=DOUBLE | 
	constantString=STRING | 
	varRef=ID;

Print:
	"print" print=Constant;
	
Algo_choose:
	"use_algorithm" algorithm=ALGO_NAME;

Read:
	"read" path=Constant  separator=SEP?;
	
Strategy_choose:
	"use_strategy" strategy="train_test" ratio=Constant | 
	"use_strategy" strategy="cross_valid" nb=Constant? ;

Column:
	"use_column" (use+=Constant)+ | 
	"unuse_column" (unuse+=Constant)+ | 
	"predict_column" predict=Constant;

Use_Metric:
	"use_metric" metric=METRIC;

terminal METRIC:
	"accuracy" | 
	"recall" | 
	"f1";

PREDICT:
	"predict";

terminal SEP:
	";"|",";

terminal ALGO_NAME:
	"tree" | 
	"svm";

terminal DOUBLE:
	INT "." INT ;

terminal MLINT:
	INT;
