/**
 * generated by Xtext 2.23.0
 */
package ml.classification.dSL.impl;

import java.util.Collection;

import ml.classification.dSL.Column;
import ml.classification.dSL.DSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Column</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ml.classification.dSL.impl.ColumnImpl#getUse <em>Use</em>}</li>
 *   <li>{@link ml.classification.dSL.impl.ColumnImpl#getUnuse <em>Unuse</em>}</li>
 *   <li>{@link ml.classification.dSL.impl.ColumnImpl#getPredict <em>Predict</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ColumnImpl extends MinimalEObjectImpl.Container implements Column
{
  /**
   * The cached value of the '{@link #getUse() <em>Use</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUse()
   * @generated
   * @ordered
   */
  protected EList<Integer> use;

  /**
   * The cached value of the '{@link #getUnuse() <em>Unuse</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnuse()
   * @generated
   * @ordered
   */
  protected EList<Integer> unuse;

  /**
   * The default value of the '{@link #getPredict() <em>Predict</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredict()
   * @generated
   * @ordered
   */
  protected static final int PREDICT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPredict() <em>Predict</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredict()
   * @generated
   * @ordered
   */
  protected int predict = PREDICT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ColumnImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.COLUMN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Integer> getUse()
  {
    if (use == null)
    {
      use = new EDataTypeEList<Integer>(Integer.class, this, DSLPackage.COLUMN__USE);
    }
    return use;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Integer> getUnuse()
  {
    if (unuse == null)
    {
      unuse = new EDataTypeEList<Integer>(Integer.class, this, DSLPackage.COLUMN__UNUSE);
    }
    return unuse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPredict()
  {
    return predict;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredict(int newPredict)
  {
    int oldPredict = predict;
    predict = newPredict;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.COLUMN__PREDICT, oldPredict, predict));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.COLUMN__USE:
        return getUse();
      case DSLPackage.COLUMN__UNUSE:
        return getUnuse();
      case DSLPackage.COLUMN__PREDICT:
        return getPredict();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.COLUMN__USE:
        getUse().clear();
        getUse().addAll((Collection<? extends Integer>)newValue);
        return;
      case DSLPackage.COLUMN__UNUSE:
        getUnuse().clear();
        getUnuse().addAll((Collection<? extends Integer>)newValue);
        return;
      case DSLPackage.COLUMN__PREDICT:
        setPredict((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.COLUMN__USE:
        getUse().clear();
        return;
      case DSLPackage.COLUMN__UNUSE:
        getUnuse().clear();
        return;
      case DSLPackage.COLUMN__PREDICT:
        setPredict(PREDICT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.COLUMN__USE:
        return use != null && !use.isEmpty();
      case DSLPackage.COLUMN__UNUSE:
        return unuse != null && !unuse.isEmpty();
      case DSLPackage.COLUMN__PREDICT:
        return predict != PREDICT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (use: ");
    result.append(use);
    result.append(", unuse: ");
    result.append(unuse);
    result.append(", predict: ");
    result.append(predict);
    result.append(')');
    return result.toString();
  }

} //ColumnImpl
