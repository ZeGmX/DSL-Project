/**
 * generated by Xtext 2.23.0
 */
package ml.classification.dSL.impl;

import ml.classification.dSL.Assign;
import ml.classification.dSL.DSLPackage;
import ml.classification.dSL.Expression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assign</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ml.classification.dSL.impl.AssignImpl#getVarname <em>Varname</em>}</li>
 *   <li>{@link ml.classification.dSL.impl.AssignImpl#getAssign_value <em>Assign value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssignImpl extends MinimalEObjectImpl.Container implements Assign
{
  /**
   * The default value of the '{@link #getVarname() <em>Varname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarname()
   * @generated
   * @ordered
   */
  protected static final String VARNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVarname() <em>Varname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarname()
   * @generated
   * @ordered
   */
  protected String varname = VARNAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssign_value() <em>Assign value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssign_value()
   * @generated
   * @ordered
   */
  protected Expression assign_value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssignImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.ASSIGN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVarname()
  {
    return varname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarname(String newVarname)
  {
    String oldVarname = varname;
    varname = newVarname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.ASSIGN__VARNAME, oldVarname, varname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getAssign_value()
  {
    return assign_value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssign_value(Expression newAssign_value, NotificationChain msgs)
  {
    Expression oldAssign_value = assign_value;
    assign_value = newAssign_value;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DSLPackage.ASSIGN__ASSIGN_VALUE, oldAssign_value, newAssign_value);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssign_value(Expression newAssign_value)
  {
    if (newAssign_value != assign_value)
    {
      NotificationChain msgs = null;
      if (assign_value != null)
        msgs = ((InternalEObject)assign_value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DSLPackage.ASSIGN__ASSIGN_VALUE, null, msgs);
      if (newAssign_value != null)
        msgs = ((InternalEObject)newAssign_value).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DSLPackage.ASSIGN__ASSIGN_VALUE, null, msgs);
      msgs = basicSetAssign_value(newAssign_value, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.ASSIGN__ASSIGN_VALUE, newAssign_value, newAssign_value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DSLPackage.ASSIGN__ASSIGN_VALUE:
        return basicSetAssign_value(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.ASSIGN__VARNAME:
        return getVarname();
      case DSLPackage.ASSIGN__ASSIGN_VALUE:
        return getAssign_value();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.ASSIGN__VARNAME:
        setVarname((String)newValue);
        return;
      case DSLPackage.ASSIGN__ASSIGN_VALUE:
        setAssign_value((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.ASSIGN__VARNAME:
        setVarname(VARNAME_EDEFAULT);
        return;
      case DSLPackage.ASSIGN__ASSIGN_VALUE:
        setAssign_value((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.ASSIGN__VARNAME:
        return VARNAME_EDEFAULT == null ? varname != null : !VARNAME_EDEFAULT.equals(varname);
      case DSLPackage.ASSIGN__ASSIGN_VALUE:
        return assign_value != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (varname: ");
    result.append(varname);
    result.append(')');
    return result.toString();
  }

} //AssignImpl
