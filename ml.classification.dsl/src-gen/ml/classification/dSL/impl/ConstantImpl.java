/**
 * generated by Xtext 2.23.0
 */
package ml.classification.dSL.impl;

import ml.classification.dSL.Constant;
import ml.classification.dSL.DSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Constant</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ml.classification.dSL.impl.ConstantImpl#getValInt <em>Val Int</em>}</li>
 *   <li>{@link ml.classification.dSL.impl.ConstantImpl#getValDouble <em>Val Double</em>}</li>
 *   <li>{@link ml.classification.dSL.impl.ConstantImpl#getValString <em>Val String</em>}</li>
 *   <li>{@link ml.classification.dSL.impl.ConstantImpl#getValID <em>Val ID</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConstantImpl extends MinimalEObjectImpl.Container implements Constant
{
  /**
   * The default value of the '{@link #getValInt() <em>Val Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValInt()
   * @generated
   * @ordered
   */
  protected static final int VAL_INT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getValInt() <em>Val Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValInt()
   * @generated
   * @ordered
   */
  protected int valInt = VAL_INT_EDEFAULT;

  /**
   * The default value of the '{@link #getValDouble() <em>Val Double</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValDouble()
   * @generated
   * @ordered
   */
  protected static final String VAL_DOUBLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValDouble() <em>Val Double</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValDouble()
   * @generated
   * @ordered
   */
  protected String valDouble = VAL_DOUBLE_EDEFAULT;

  /**
   * The default value of the '{@link #getValString() <em>Val String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValString()
   * @generated
   * @ordered
   */
  protected static final String VAL_STRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValString() <em>Val String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValString()
   * @generated
   * @ordered
   */
  protected String valString = VAL_STRING_EDEFAULT;

  /**
   * The default value of the '{@link #getValID() <em>Val ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValID()
   * @generated
   * @ordered
   */
  protected static final String VAL_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValID() <em>Val ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValID()
   * @generated
   * @ordered
   */
  protected String valID = VAL_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstantImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.CONSTANT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValInt()
  {
    return valInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValInt(int newValInt)
  {
    int oldValInt = valInt;
    valInt = newValInt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.CONSTANT__VAL_INT, oldValInt, valInt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValDouble()
  {
    return valDouble;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValDouble(String newValDouble)
  {
    String oldValDouble = valDouble;
    valDouble = newValDouble;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.CONSTANT__VAL_DOUBLE, oldValDouble, valDouble));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValString()
  {
    return valString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValString(String newValString)
  {
    String oldValString = valString;
    valString = newValString;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.CONSTANT__VAL_STRING, oldValString, valString));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValID()
  {
    return valID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValID(String newValID)
  {
    String oldValID = valID;
    valID = newValID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.CONSTANT__VAL_ID, oldValID, valID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.CONSTANT__VAL_INT:
        return getValInt();
      case DSLPackage.CONSTANT__VAL_DOUBLE:
        return getValDouble();
      case DSLPackage.CONSTANT__VAL_STRING:
        return getValString();
      case DSLPackage.CONSTANT__VAL_ID:
        return getValID();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.CONSTANT__VAL_INT:
        setValInt((Integer)newValue);
        return;
      case DSLPackage.CONSTANT__VAL_DOUBLE:
        setValDouble((String)newValue);
        return;
      case DSLPackage.CONSTANT__VAL_STRING:
        setValString((String)newValue);
        return;
      case DSLPackage.CONSTANT__VAL_ID:
        setValID((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.CONSTANT__VAL_INT:
        setValInt(VAL_INT_EDEFAULT);
        return;
      case DSLPackage.CONSTANT__VAL_DOUBLE:
        setValDouble(VAL_DOUBLE_EDEFAULT);
        return;
      case DSLPackage.CONSTANT__VAL_STRING:
        setValString(VAL_STRING_EDEFAULT);
        return;
      case DSLPackage.CONSTANT__VAL_ID:
        setValID(VAL_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.CONSTANT__VAL_INT:
        return valInt != VAL_INT_EDEFAULT;
      case DSLPackage.CONSTANT__VAL_DOUBLE:
        return VAL_DOUBLE_EDEFAULT == null ? valDouble != null : !VAL_DOUBLE_EDEFAULT.equals(valDouble);
      case DSLPackage.CONSTANT__VAL_STRING:
        return VAL_STRING_EDEFAULT == null ? valString != null : !VAL_STRING_EDEFAULT.equals(valString);
      case DSLPackage.CONSTANT__VAL_ID:
        return VAL_ID_EDEFAULT == null ? valID != null : !VAL_ID_EDEFAULT.equals(valID);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (valInt: ");
    result.append(valInt);
    result.append(", valDouble: ");
    result.append(valDouble);
    result.append(", valString: ");
    result.append(valString);
    result.append(", valID: ");
    result.append(valID);
    result.append(')');
    return result.toString();
  }

} //ConstantImpl
