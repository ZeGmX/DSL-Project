/*
 * generated by Xtext 2.23.0
 */
grammar InternalDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ml.classification.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ml.classification.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ml.classification.services.DSLGrammarAccess;

}

@parser::members {

 	private DSLGrammarAccess grammarAccess;

    public InternalDSLParser(TokenStream input, DSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ML";
   	}

   	@Override
   	protected DSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleML
entryRuleML returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMLRule()); }
	iv_ruleML=ruleML
	{ $current=$iv_ruleML.current; }
	EOF;

// Rule ML
ruleML returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMLAccess().getStatementsStatementParserRuleCall_0_0());
				}
				lv_statements_0_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_0,
						"ml.classification.DSL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMLAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"ml.classification.DSL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getAssignAssignParserRuleCall_0_0());
				}
				lv_assign_0_0=ruleAssign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"assign",
						lv_assign_0_0,
						"ml.classification.DSL.Assign");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getPrimitivePrimitiveParserRuleCall_1_0());
				}
				lv_primitive_1_0=rulePrimitive
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"primitive",
						lv_primitive_1_0,
						"ml.classification.DSL.Primitive");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssign
entryRuleAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignRule()); }
	iv_ruleAssign=ruleAssign
	{ $current=$iv_ruleAssign.current; }
	EOF;

// Rule Assign
ruleAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_varname_0_0=RULE_ID
				{
					newLeafNode(lv_varname_0_0, grammarAccess.getAssignAccess().getVarnameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignRule());
					}
					setWithLastConsumed(
						$current,
						"varname",
						lv_varname_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignAccess().getAssign_valueExpressionParserRuleCall_2_0());
				}
				lv_assign_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignRule());
					}
					set(
						$current,
						"assign_value",
						lv_assign_value_2_0,
						"ml.classification.DSL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpr_primPrimitiveParserRuleCall_0_0());
				}
				lv_expr_prim_0_0=rulePrimitive
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"expr_prim",
						lv_expr_prim_0_0,
						"ml.classification.DSL.Primitive");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpr_constConstantParserRuleCall_1_0());
				}
				lv_expr_const_1_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"expr_const",
						lv_expr_const_1_0,
						"ml.classification.DSL.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimitive
entryRulePrimitive returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); }
	iv_rulePrimitive=rulePrimitive
	{ $current=$iv_rulePrimitive.current; }
	EOF;

// Rule Primitive
rulePrimitive returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveAccess().getPrintPrintParserRuleCall_0_0());
				}
				lv_print_0_0=rulePrint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveRule());
					}
					set(
						$current,
						"print",
						lv_print_0_0,
						"ml.classification.DSL.Print");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveAccess().getAlgo_chooseAlgo_chooseParserRuleCall_1_0());
				}
				lv_algo_choose_1_0=ruleAlgo_choose
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveRule());
					}
					set(
						$current,
						"algo_choose",
						lv_algo_choose_1_0,
						"ml.classification.DSL.Algo_choose");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveAccess().getReadReadParserRuleCall_2_0());
				}
				lv_read_2_0=ruleRead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveRule());
					}
					set(
						$current,
						"read",
						lv_read_2_0,
						"ml.classification.DSL.Read");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveAccess().getStrategy_chooseStrategy_chooseParserRuleCall_3_0());
				}
				lv_strategy_choose_3_0=ruleStrategy_choose
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveRule());
					}
					set(
						$current,
						"strategy_choose",
						lv_strategy_choose_3_0,
						"ml.classification.DSL.Strategy_choose");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveAccess().getColumnColumnParserRuleCall_4_0());
				}
				lv_column_4_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveRule());
					}
					set(
						$current,
						"column",
						lv_column_4_0,
						"ml.classification.DSL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveAccess().getUse_metricUse_MetricParserRuleCall_5_0());
				}
				lv_use_metric_5_0=ruleUse_Metric
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveRule());
					}
					set(
						$current,
						"use_metric",
						lv_use_metric_5_0,
						"ml.classification.DSL.Use_Metric");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveAccess().getPredictPredictParserRuleCall_6_0());
				}
				lv_predict_6_0=rulePredict
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveRule());
					}
					set(
						$current,
						"predict",
						lv_predict_6_0,
						"ml.classification.DSL.Predict");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredict
entryRulePredict returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPredictRule()); }
	iv_rulePredict=rulePredict
	{ $current=$iv_rulePredict.current.getText(); }
	EOF;

// Rule Predict
rulePredict returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='predict'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPredictAccess().getPredictKeyword());
	}
;

// Entry rule entryRuleConstant
entryRuleConstant returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current.getText(); }
	EOF;

// Rule Constant
ruleConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getConstantAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_DOUBLE_1=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_1);
		}
		{
			newLeafNode(this_DOUBLE_1, grammarAccess.getConstantAccess().getDOUBLETerminalRuleCall_1());
		}
		    |
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_2());
		}
		    |
		this_ID_3=RULE_ID
		{
			$current.merge(this_ID_3);
		}
		{
			newLeafNode(this_ID_3, grammarAccess.getConstantAccess().getIDTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleUse_Metric
entryRuleUse_Metric returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUse_MetricRule()); }
	iv_ruleUse_Metric=ruleUse_Metric
	{ $current=$iv_ruleUse_Metric.current; }
	EOF;

// Rule Use_Metric
ruleUse_Metric returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='use_metric'
		{
			newLeafNode(otherlv_0, grammarAccess.getUse_MetricAccess().getUse_metricKeyword_0());
		}
		(
			(
				lv_metric_1_0=RULE_METRIC
				{
					newLeafNode(lv_metric_1_0, grammarAccess.getUse_MetricAccess().getMetricMETRICTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUse_MetricRule());
					}
					setWithLastConsumed(
						$current,
						"metric",
						lv_metric_1_0,
						"ml.classification.DSL.METRIC");
				}
			)
		)
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='use_column'
			{
				newLeafNode(otherlv_0, grammarAccess.getColumnAccess().getUse_columnKeyword_0_0());
			}
			(
				(
					lv_use_1_0=RULE_INT
					{
						newLeafNode(lv_use_1_0, grammarAccess.getColumnAccess().getUseINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnRule());
						}
						addWithLastConsumed(
							$current,
							"use",
							lv_use_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)+
		)
		    |
		(
			otherlv_2='unuse_column'
			{
				newLeafNode(otherlv_2, grammarAccess.getColumnAccess().getUnuse_columnKeyword_1_0());
			}
			(
				(
					lv_unuse_3_0=RULE_INT
					{
						newLeafNode(lv_unuse_3_0, grammarAccess.getColumnAccess().getUnuseINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnRule());
						}
						addWithLastConsumed(
							$current,
							"unuse",
							lv_unuse_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)+
		)
		    |
		(
			otherlv_4='predict_column'
			{
				newLeafNode(otherlv_4, grammarAccess.getColumnAccess().getPredict_columnKeyword_2_0());
			}
			(
				(
					lv_predict_5_0=RULE_INT
					{
						newLeafNode(lv_predict_5_0, grammarAccess.getColumnAccess().getPredictINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnRule());
						}
						setWithLastConsumed(
							$current,
							"predict",
							lv_predict_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStrategy_choose
entryRuleStrategy_choose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStrategy_chooseRule()); }
	iv_ruleStrategy_choose=ruleStrategy_choose
	{ $current=$iv_ruleStrategy_choose.current; }
	EOF;

// Rule Strategy_choose
ruleStrategy_choose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='use_strategy'
			{
				newLeafNode(otherlv_0, grammarAccess.getStrategy_chooseAccess().getUse_strategyKeyword_0_0());
			}
			(
				(
					lv_strategy_1_0='train_test'
					{
						newLeafNode(lv_strategy_1_0, grammarAccess.getStrategy_chooseAccess().getStrategyTrain_testKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStrategy_chooseRule());
						}
						setWithLastConsumed($current, "strategy", lv_strategy_1_0, "train_test");
					}
				)
			)
			(
				(
					lv_ratio_2_0=RULE_DOUBLE
					{
						newLeafNode(lv_ratio_2_0, grammarAccess.getStrategy_chooseAccess().getRatioDOUBLETerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStrategy_chooseRule());
						}
						setWithLastConsumed(
							$current,
							"ratio",
							lv_ratio_2_0,
							"ml.classification.DSL.DOUBLE");
					}
				)
			)
		)
		    |
		(
			otherlv_3='use_strategy'
			{
				newLeafNode(otherlv_3, grammarAccess.getStrategy_chooseAccess().getUse_strategyKeyword_1_0());
			}
			(
				(
					lv_strategy_4_0='cross_valid'
					{
						newLeafNode(lv_strategy_4_0, grammarAccess.getStrategy_chooseAccess().getStrategyCross_validKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStrategy_chooseRule());
						}
						setWithLastConsumed($current, "strategy", lv_strategy_4_0, "cross_valid");
					}
				)
			)
			(
				(
					lv_nb_5_0=RULE_INT
					{
						newLeafNode(lv_nb_5_0, grammarAccess.getStrategy_chooseAccess().getNbINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStrategy_chooseRule());
						}
						setWithLastConsumed(
							$current,
							"nb",
							lv_nb_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleRead
entryRuleRead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadRule()); }
	iv_ruleRead=ruleRead
	{ $current=$iv_ruleRead.current; }
	EOF;

// Rule Read
ruleRead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read'
		{
			newLeafNode(otherlv_0, grammarAccess.getReadAccess().getReadKeyword_0());
		}
		(
			(
				lv_path_1_0=RULE_STRING
				{
					newLeafNode(lv_path_1_0, grammarAccess.getReadAccess().getPathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReadRule());
					}
					setWithLastConsumed(
						$current,
						"path",
						lv_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_separator_2_0=RULE_SEP
				{
					newLeafNode(lv_separator_2_0, grammarAccess.getReadAccess().getSeparatorSEPTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReadRule());
					}
					setWithLastConsumed(
						$current,
						"separator",
						lv_separator_2_0,
						"ml.classification.DSL.SEP");
				}
			)
		)?
	)
;

// Entry rule entryRuleAlgo_choose
entryRuleAlgo_choose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgo_chooseRule()); }
	iv_ruleAlgo_choose=ruleAlgo_choose
	{ $current=$iv_ruleAlgo_choose.current; }
	EOF;

// Rule Algo_choose
ruleAlgo_choose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='use_algorithm'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgo_chooseAccess().getUse_algorithmKeyword_0());
		}
		(
			(
				lv_algorithm_1_0=RULE_ALGO_NAME
				{
					newLeafNode(lv_algorithm_1_0, grammarAccess.getAlgo_chooseAccess().getAlgorithmALGO_NAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgo_chooseRule());
					}
					setWithLastConsumed(
						$current,
						"algorithm",
						lv_algorithm_1_0,
						"ml.classification.DSL.ALGO_NAME");
				}
			)
		)
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getPrintConstantParserRuleCall_1_0());
				}
				lv_print_1_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					set(
						$current,
						"print",
						lv_print_1_0,
						"ml.classification.DSL.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_METRIC : ('accuracy'|'recall'|'f1');

RULE_SEP : (';'|',');

RULE_ALGO_NAME : ('tree'|'svm');

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
